import { CANCEL_BUTTON, COMPLETE_BUTTON, EXIT_BUTTON, SKIP_BUTTON, SKIP_INLINE_KEYBOARD } from "@bot/helpers/constants";
import {
    advanceWithExecution, asyncWrapper, buildInlineButtonsFromCollection,
    callApi, fetchState, formatError, formatIncorrect, formatOk, getCleanWord,
    getValidMessageText, sendCancelableMessage
} from "@bot/helpers";

import { BotContext } from "@bot/types";
import { Composer, Context, Markup, Scenes } from "telegraf";
import { replyMenuToContext } from "telegraf-inline-menu/dist/source";
import { calculatePercent, checkRange } from "@utils/helpers";
import { Size, Category } from "@shop/database/models";
import { Logger } from "@utils/logger";
import mainMenu from "@bot/menu/main";
import { ProductData } from "./types";
import { PRODUCT_IMAGE_MIN_HEIGHT, PRODUCT_IMAGE_MIN_WIDTH } from "@utils/constants";

const { SERVER_HOST, SERVER_PORT } = process.env;

interface AddProductContext extends BotContext {
    wizard: Scenes.WizardContextWizard<AddProductContext> & { state: AddProductState }
}

interface AddProductState {
    inited: boolean;
    products: ProductData[];
    currentProduct: ProductData;
    database: DatabaseCollections;
    local: {
        repeat: boolean;
        genders: string[];
        categoryNames: string[];
        sizeNames: string[];
        sizeIndex: number;
    };
}

interface DatabaseCollections {
    sex: any;
    sizes: { name: string }[];
    categories: {
        name_ru: string;
        name_en: string;
    }[];
}

const sizeSelectStep = new Composer<AddProductContext>();

sizeSelectStep.hears(/^[0-9]+$/, async (context) => {
    const { currentProduct, local } = context.wizard.state;
    const sizeRef = currentProduct.sizes[local.sizeIndex];
    if (!sizeRef) return;

    const number = Number(context.message.text);
    sizeRef.count = number;

    local.sizeNames = local.sizeNames.filter(size => sizeRef.name != size);
    local.sizeIndex++;

    const stockListString = currentProduct.sizes.map(({ count, name }) => `üó≥ –†–∞–∑–º–µ—Ä ${name}, –∫–æ–ª-–≤–æ: ${count}—à—Ç.`).join("\n");
    const promptString = local.sizeNames.length < 1
        ? "üòÖ –î–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        : "üéà –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥.";

    return sendSelectSizeKeyboard(
        context,
        formatOk(
            `–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n${stockListString}\n\n` +
            promptString
        ), true
    );
});

sizeSelectStep.action(/size-(.*)/i, asyncWrapper(
    async context => {
        await context.answerCbQuery();

        const { currentProduct, local } = context.wizard.state;
        if (!context.match) return;
        const [, sizeName] = context.match;

        if (!sizeName) return sendSelectSizeKeyboard(context, "ü¶∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã!");
        if (!Array.isArray(currentProduct.sizes)) currentProduct.sizes = [];

        currentProduct.sizes[local.sizeIndex] = {
            count: -1,
            name: sizeName
        };

        context.editMessageText(`üìú –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: ${sizeName}.\n\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞`);
    })
);

const categorySelectStep = new Composer<AddProductContext>();

categorySelectStep.action(/category-(.*)/, asyncWrapper<AddProductContext>(
    async context => {
        const { currentProduct } = context.wizard.state;
        const [, category] = context.match!;
        currentProduct.category = category;

        await context.editMessageText(formatOk(`–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: ${category}\n\n–î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ`));
        return advanceWithExecution(context);
    })
);


const sexSelectStep = new Composer<AddProductContext>();

sexSelectStep.action(/sex-(.*)/, asyncWrapper<AddProductContext>(
    async context => {
        const { currentProduct, local } = context.wizard.state;
        const [, genderString] = context.match!;
        let index = local.genders.findIndex(value => value == genderString);
        if (index == -1) index = 0;

        currentProduct.sex = index;

        await context.editMessageText(formatOk(`–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª: ${getCleanWord(genderString)}`));
        return advanceWithExecution(context);
    }
))

const STILL_OLD_BUTTON = Markup.button.callback("–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ", "skip");

const scene = new Scenes.WizardScene<AddProductContext>(
    "add-product",

    asyncWrapper(async context => {
        await initAddProductState(context);
        await context.reply(
            "üè∑ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.\n\n" +
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞. –õ–∏–±–æ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.",

            Markup.inlineKeyboard([
                getButtonsForRepeat(context),
                [CANCEL_BUTTON]
            ])
        );

        return context.wizard.next();
    }),

    asyncWrapper(async (context: AddProductContext) => {
        const text = getValidMessageText(context, /.*/i);
        if (!text) return await sendCancelableMessage(context, formatIncorrect("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."));

        const state = fetchState<AddProductState>(context);
        state.currentProduct.name = text.trim();

        return advanceWithExecution(context);
    }),

    asyncWrapper(async context => {
        await context.reply(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.", Markup.inlineKeyboard([
                getButtonsForRepeat(context),
                [CANCEL_BUTTON]
            ])
        );

        return context.wizard.next();
    }),

    asyncWrapper(async (context: AddProductContext) => {
        const state = fetchState<AddProductState>(context);
        const text = getValidMessageText(context, /.*/i);

        if (!text) return await sendCancelableMessage(context, formatIncorrect("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."));

        state.currentProduct.description = text.trim();
        return advanceWithExecution(context);
    }),

    asyncWrapper<AddProductContext>(async context => {
        await sendCancelableMessage(context, "üíµ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.");

        return context.wizard.next();
    }),

    asyncWrapper(async (context: AddProductContext) => {
        const text = getValidMessageText(context, /^[0-9]+/i);

        if (!text) return sendCancelableMessage(context, "üê∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞, –∫–∞–∫ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!");

        const price = Number(text);
        if (price < 1) return context.reply("üòë –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞? –¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:");

        const state = fetchState<AddProductState>(context);
        state.currentProduct.price = Number(price);

        await context.reply(
            "üç© –£–∫–∞–∂–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä, –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—ë –Ω–µ –±—É–¥–µ—Ç.\n\n–ó–Ω–∞—á–µ–Ω–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1% –¥–æ 90%.",
            SKIP_INLINE_KEYBOARD
        );

        return context.wizard.next();
    }),

    asyncWrapper(async (context: AddProductContext) => {
        const text = getValidMessageText(context, /^\d+/);
        if (!text) return context.reply(
            formatIncorrect("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."),
            SKIP_INLINE_KEYBOARD
        );

        const state = fetchState<AddProductState>(context);

        const discount = Number(text.trim());
        if (checkRange(discount, [1, 90])) {
            state.currentProduct.forSale = true;
            state.currentProduct.discount = discount;
            const price = state.currentProduct.price;
            const discountPrice = price - calculatePercent(price, discount);

            await context.reply(formatOk(`–û—Ç–ª–∏—á–Ω–æ! –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: ${discountPrice}‚ÇΩ`));

            advanceWithExecution(context);
        } else context.reply(formatIncorrect("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 90."));
    }),

    asyncWrapper<AddProductContext>(async context => {
        const { database, local } = context.wizard.state;
        const sizeNames = database.sizes.map(size => size.name);
        local.sizeNames = sizeNames;
        local.sizeIndex = 0;

        sendSelectSizeKeyboard(context);
        return context.wizard.next();
    }),

    sizeSelectStep,

    asyncWrapper<AddProductContext>(async context => {
        const { database, local } = context.wizard.state;
        const categoryNames = database.categories.map(category => category.name_ru);
        local.categoryNames = categoryNames;

        const buttons = buildInlineButtonsFromCollection(categoryNames, "category");
        await context.reply("üëô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", Markup.inlineKeyboard(buttons));
        return context.wizard.next();
    }),

    categorySelectStep,

    asyncWrapper(async context => {
        const { local } = context.wizard.state;
        local.genders = ["‚ò∫ –£–Ω–∏—Å–µ–∫—Å", "üëß –ñ–µ–Ω—Å–∫–∏–π", "üë® –ú—É–∂—Å–∫–æ–π"];
        const inlineButtons = buildInlineButtonsFromCollection(local.genders, "sex");

        await context.reply("üëΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", Markup.inlineKeyboard(inlineButtons));
        return context.wizard.next();
    }),

    sexSelectStep,

    asyncWrapper(async context => {
        await context.reply("üé® –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞");

        return context.wizard.next();
    }),

    asyncWrapper(async context => {
        const text = getValidMessageText(context, /[\sa-z–∞-—è]+$/i);
        const state = fetchState<AddProductState>(context);
        if (!text) return context.reply(formatIncorrect("–£–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞!"));

        state.currentProduct.color = text!;

        await context.reply("üñºÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 1080x1920", Markup.inlineKeyboard([COMPLETE_BUTTON]));

        return context.wizard.next();
    }),

    asyncWrapper<AddProductContext>(async (context) => {
        const { currentProduct } = fetchState<AddProductState>(context);
        Logger.log(currentProduct, context.message);
        const valid = context.message && ("photo" in context.message || "document" in context.message);
        if (!valid) return context.reply(formatIncorrect("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞."));

        const fileIds: string[] = [];

        if ("photo" in context.message!) {
            const photos = context.message.photo;
            const [photo] = photos
                .filter(a => a.file_size)
                .sort((a, b) => a.file_size! < b.file_size! ? 1 : -1);

            if (!validDocumentResolution(photo)) {
                return context.reply(formatIncorrect(`–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ–Ω—å—à–µ, —á–µ–º –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (${PRODUCT_IMAGE_MIN_WIDTH}x${PRODUCT_IMAGE_MIN_HEIGHT})!`));
            }

            fileIds.push(photo.file_id);
        }

        if ("document" in context.message!) {
            const { file_id, mime_type, thumb } = context.message.document;
            if (!mime_type) return;
            if (mime_type.search("image") == -1) return context.reply(formatIncorrect("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."));
            fileIds.push(file_id);
        }

        const results = await Promise.all(
            fileIds.map(fileId => context.telegram.getFileLink(fileId))
        );

        results.forEach(result => currentProduct.imageUrls.push(result.href));
        await context.reply("üì≤ –í–∞—à —Ñ–∞–π–ª –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.\n\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\"", Markup.inlineKeyboard([COMPLETE_BUTTON]))
    }),

    asyncWrapper<AddProductContext>(async (context) => {
        const state = fetchState<AddProductState>(context);
        const addResponse = await callApi("product.add", state.currentProduct);

        if (addResponse.error) {
            Logger.error(addResponse.error);

            return context.reply(
                formatError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!\n\nüôÑ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ?"),
                Markup.inlineKeyboard([
                    [Markup.button.callback("üîÇ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ", "repeat")],
                    [EXIT_BUTTON]
                ])
            );
        }

        const insertedId = addResponse.payload;
        const url = `http://${SERVER_HOST}:${SERVER_PORT}/product/${insertedId}`;

        await context.reply(
            "üòâ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.\n\n" +
            `üòé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n${url}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä?`,

            Markup.inlineKeyboard([
                [Markup.button.callback("üíé –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", "repeat")],
                [EXIT_BUTTON]
            ])
        );
    })
);

scene.action("repeat", asyncWrapper(
    async context => {
        await context.answerCbQuery();

        let state = fetchState<AddProductState>(context);
        const lastState = Object.assign({}, state.currentProduct);

        state = clearState(state);
        state.currentProduct.name = lastState.name;
        state.currentProduct.description = lastState.description;
        state.local.repeat = true;

        context.wizard.selectStep(0);
        return advanceWithExecution(context, -1);
    }
));

scene.action(["skip", "complete"], asyncWrapper(
    async (context) => {
        await context.answerCbQuery();
        await advanceWithExecution(context)
    }
));

scene.action(["back_main_menu", "cancel"], asyncWrapper(
    async context => {
        await context.answerCbQuery();
        await context.scene.leave();
        await replyMenuToContext(mainMenu, context, "/products-menu/");
    }
));

function sendSelectSizeKeyboard(
    context: BotContext,
    message: string = "üëö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã.",
    skipButton: boolean = false
) {
    const { local } = context.wizard.state;

    const sizeButtons = buildInlineButtonsFromCollection(local.sizeNames, "size");
    const buttons = sizeButtons;

    if (skipButton) buttons.push([SKIP_BUTTON]);

    return context.reply(message, Markup.inlineKeyboard(buttons));
}

function getButtonsForRepeat(context: AddProductContext) {
    const state = fetchState<AddProductState>(context);
    return state.local.repeat ? [STILL_OLD_BUTTON] : [];
}

type DocumentResolutionCheckOptions = {
    width: number,
    height: number;
} & Record<string, any>;

function validDocumentResolution(doc: DocumentResolutionCheckOptions) {
    return doc.width >= PRODUCT_IMAGE_MIN_WIDTH && doc.height >= PRODUCT_IMAGE_MIN_HEIGHT;
}

async function initAddProductState(context: AddProductContext) {
    const state = fetchState<AddProductState>(context);
    if (state.inited) return state;

    state.products = [];
    state.currentProduct = {
        imageUrls: [],
        sizes: [],
        discount: 0,
        category: "",
        color: "",
        description: "",
        name: "",
        price: 0,
        sex: 0,
        forSale: false
    };

    state.database = {
        categories: await Category.find() as [],
        sizes: await Size.find() as [],
        sex: null
    };

    state.local = {
        repeat: false,
        genders: [],
        categoryNames: [],
        sizeNames: [],
        sizeIndex: 0
    };

    state.inited = true;

    return state;
}

function clearState(state: AddProductState) {
    const { local } = state;
    local.genders = [];
    local.categoryNames = [];
    local.sizeNames = [];
    local.sizeIndex = 0;

    state.currentProduct = {
        imageUrls: [],
        sizes: [],
        discount: 0,
        category: "",
        color: "",
        description: "",
        name: "",
        price: 0,
        sex: 0,
        forSale: false
    };

    return state;
}

export default scene;